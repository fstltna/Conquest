%{

//
// Author: Jon Trulson <jon@radscan.com>
// Copyright (c) 1994-2018 Jon Trulson
//
// The MIT License
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy,
// modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//

/*                              C O N Q S T R A T */

/* Original Copyright (C)1985-1986 by Jef Poskanzer and Craig Leres */

/**********************************************************************/
/* Unix/C specific porting and supporting code Copyright (C)1994-1996 */
/* by Jon Trulson <jon@radscan.com> under the same terms and          */
/* conditions of the original copyright by Jef Poskanzer and Craig    */
/* Leres.                                                             */
/**********************************************************************/

#include "c_defs.h"

#include "conqdef.h"
#include "robot.h"

#include "conqai.h"

#include "conqstrat.h"

int rulenum;
static int trstrat[MAX_VAR][10], trvec[32];
int debug_scanner, verbose;

extern int Lineno;
extern int goterror;
int yylex(void);

void yyerror (char const *s)
{
    fprintf (stderr, "%s\n", s);
}
%}


%token TOK_VARIABLE
%token TOK_OPERATOR
%token TOK_NUMBER
%token TOK_TERMINATOR
%token TOK_ACTION
%token TOK_AND
%token TOK_NOT

%%
rulelist	:	rulelist rule
		|	rule
		;

rule		:	exprlist TOK_TERMINATOR TOK_ACTION
			{
			  dumprule( $3 );
			}
		|	TOK_TERMINATOR TOK_ACTION
			{
			  dumprule( $2 );
			}
		|	error
		;

exprlist	:	expr
		|	exprlist TOK_AND expr
		;

expr		:	TOK_VARIABLE TOK_OPERATOR TOK_NUMBER
			{
			  addrule( $1, $2, $3 );
			}
		|	TOK_NUMBER TOK_OPERATOR TOK_VARIABLE
			{
			  addrule( $3, invertop( $2 ), $1 );
			}
		|	TOK_VARIABLE
			{
			  addrule( $1, OP_NE, 0 );
			}
		|	TOK_NOT TOK_VARIABLE
			{
			  addrule( $2, OP_EQ, 0 );
			}
		;

%%


// This function is a copy from conqai.cxx. We do not want to link
// this with any conquest libs due to the fact that a circular
// dependency then arises.
static void myrobstr( int token, char buf[] )
{

    switch ( token )
    {
    case ROB_NOOP:
        strcpy(buf , "NOOP") ;
        break;
    case ROB_GOHOME:
        strcpy(buf , "GOHOME") ;
        break;
    case ROB_GOREPAIR:
        strcpy(buf , "GOREPAIR") ;
        break;
    case ROB_ALLOCATE:
        strcpy(buf , "ALLOCATE") ;
        break;
    case ROB_DETONATE:
        strcpy(buf , "DETONATE") ;
        break;
    case ROB_MYDETONATE:
        strcpy(buf , "MYDETONAT") ;
        break;
    case ROB_PHASER:
        strcpy(buf , "PHASER") ;
        break;
    case ROB_TORPEDO:
        strcpy(buf , "TORPEDO") ;
        break;
    case ROB_BURST:
        strcpy(buf , "BURST") ;
        break;
    case ROB_SHIELD:
        strcpy(buf , "SHIELD") ;
        break;
    case ROB_UNTRACTOR:
        strcpy(buf , "UNTRACTOR") ;
        break;
    case ROB_WARP_0:
        strcpy(buf , "WARP_0") ;
        break;
    case ROB_WARP_2:
        strcpy(buf , "WARP_2") ;
        break;
    case ROB_WARP_5:
        strcpy(buf , "WARP_5") ;
        break;
    case ROB_WARP_8:
        strcpy(buf , "WARP_8") ;
        break;
    case ROB_TRACK:
        strcpy(buf , "TRACK") ;
        break;
    case ROB_SILENT:
        strcpy(buf , "SILENT") ;
        break;
    case ROB_MESSAGE:
        strcpy(buf , "MESSAGE") ;
        break;
    case ROB_TAKEDRUGS:
        strcpy(buf , "TAKEDRUGS") ;
        break;
    case ROB_REPAIR:
        strcpy(buf , "REPAIR") ;
        break;
    case ROB_READMSG:
        strcpy(buf , "READMSG") ;
        break;
    case ROB_INSULT:
        strcpy(buf , "INSULT") ;
        break;
    case ROB_GOFUEL:
        strcpy(buf , "GOFUEL") ;
        break;
    case ROB_RUNAWAY:
        strcpy(buf , "RUNAWAY") ;
        break;
    default:
        sprintf( buf, "<%d>", token );
    }

    return;

}

// A copy from conqutil.cxx - we need this here to avoid needing to
// link to any conquest libraries which just causes a dependency hell.
static void myUtFormatTime( char *buf, time_t thetime )
{
    char junk[5] = {};

    if (!thetime)
        thetime = time(0);

    struct tm *thetm = localtime(&thetime);

    strftime(junk, 5, "%b", thetm);

    sprintf(buf, "%2d:%02d:%02d %02d%s%02d",
            thetm->tm_hour, thetm->tm_min, thetm->tm_min, thetm->tm_mday,
            junk,
            mod(thetm->tm_year + 1900, 100));

    return;

}

/* conqstrat - main program */
int main(int argc, char **argv)
{
    char filename[PATH_MAX] = {};
    int ch;
    FILE *filefd;

    debug_scanner = false;
    verbose = false;
    filefd = stdout;

//    while ( (ch = getopt( argc, argv, "dvo:U" )) != EOF )
    while ( (ch = getopt( argc, argv, "dvo:" )) != EOF )
    {
        switch(ch)
	{
	case 'v':
            verbose = true;
            break;
	case 'd':
            debug_scanner = true;
            break;
	case 'o':
            strncpy(filename, optarg, PATH_MAX - 1);
            filefd = NULL;
            break;
//	case 'U':
//            UpdateCmnBlock = true;
//            break;
	default:
            print_usage();
            exit(1);
	}
    }

    if (filefd == NULL)
    {
        if ((filefd = fopen(filename, "w")) == NULL)
	{
            fprintf(stderr, "conqstrat: can't open %s: %s\n",
                    filename,
                    strerror(errno));
            exit(1);
	}
        else
	{
            if (verbose)
	    {
                fprintf(stderr, "conqstrat: sending output to file %s\n", filename);
	    }
	}
    }

    initrun();

    if ( yyparse() == ERR )
        fprintf(stderr, "conqstrat: yyparse() error.\n" );
    if ( goterror )
    {
        fprintf(stderr,  "conqstrat: got error - aborting.\n" );
        exit(1);
    }

//    if ( UpdateCmnBlock )
//        dumprun();
//    else
        displayrun(filefd);

    if ( filefd != stdin )
        fclose( filefd );

    return(0);

}


/* initrun - initalize for the run */
void initrun(void)
{

    int i, j;

    /* Initialize random stuff. */

    rulenum = 0;
    goterror = false;

    /* Initialize the strategy table to accept everything. */
    for ( i = 0; i < MAX_VAR; i = i + 1 )
	for ( j = 0; j < 10; j = j + 1 )
	    trstrat[i][j] = ~0;		/* set all bits */

    /* Initialize the rule to action vector to nothing. */
    for ( i = 0; i < 32; i = i + 1 )
	trvec[i] = ROB_NOOP;

    return;

}

#if 0
/* dumprun - dump the run into the common block */
void dumprun(void)
{

    int i, j;

    cbMap();         /* Map the conquest common block */


    /* This is the only place we include/modify the shared common block. */
    if ( *cbRevision != COMMONSTAMP )
    {
        fprintf(stderr,"conqstrat: Common block ident mismatch.\n" );
        exit(1);
    }

    /* Copy the strategy table. */
    for ( i = 0; i < MAX_VAR; i = i + 1 )
        for ( j = 0; j < 10; j = j + 1 )
            cbRobot->rstrat[i][j] = trstrat[i][j];

    /* Copy the action vector. */
    for ( i = 0; i < 32; i = i + 1 )
        cbRobot->rvec[i] = trvec[i];

    fprintf(stderr, "conqstrat: parsed %d rules.\n", rulenum);
    fprintf(stderr, "conqstrat: common block updated.\n");

    return;

}
#endif

/* displayrun - dump the run to filefd */
void displayrun(FILE *filefd)
{
    int i, j;
    char buf[BUFFER_SIZE_128];
    static const char *strat="trstrat";
    static const char *vec="trvec";

    myUtFormatTime( buf, 0 );

    fprintf(filefd, "/*\n * conqdata.h - robot strategy data generated by conqstrat on %s\n */\n", buf );

    fprintf(filefd, "#ifndef CONQDATA_H\n#define CONQDATA_H\n\n#ifdef NOEXTERN_CONQDATA\n# define CDHEXTERN\n#else\n# define CDHEXTERN extern\n#endif\n\n");

    fprintf(filefd, "CDHEXTERN int %s[%d][10] = {\n", strat, MAX_VAR);

    for ( i = 0; i < MAX_VAR; i = i + 1 )
    {
	fprintf(filefd,"  { ");
	for ( j = 0; j < 10; j = j + 1 )
        {
	    if (j != 9)
                fprintf(filefd,  "%d, ", trstrat[i][j] );
	    else
                fprintf(filefd,  "%d", trstrat[i][j] );

	    if ( j == 4 )
                fprintf(filefd,  "\n     " );
        }
	if (i != MAX_VAR - 1)
            fprintf(filefd,  "},\n" );
	else
            fprintf(filefd, "}\n");
    }

    fprintf(filefd, "};\n\n");

    fprintf(filefd,  "CDHEXTERN int %s[32] = {", vec );
    for ( i = 0; i < 32; i = i + 1 )
    {
	if (i != 31)
            fprintf(filefd,  "%d, ", trvec[i] );
	else
            fprintf(filefd,  "%d ", trvec[i] );
	if ( i == 15 )
            fprintf(filefd,  "\n\t" );
    }
    fprintf(filefd, "};\n\n#undef CDHEXTERN /* cleanup */\n\n#endif\n\n");

    fprintf(stderr, "conqstrat: parsed %d rules.\n", rulenum);

    return;

}


/* dumprule - dump the current rule */
void dumprule( int action )
{
    int i, j, tbits;
    char buf[BUFFER_SIZE_128];

    /* Store action. */
    trvec[rulenum] = action;

    myrobstr(action, buf);
    if (debug_scanner | verbose)
        fprintf(stderr, "DEBUG: ### dumprule(): rulenum = %d, action = %s\n", rulenum, buf);

    /* Check for impossible rules. */
    for ( i = 0; i < MAX_VAR; i = i + 1 )
    {
        /* There must be at least one value that this variable accepts. */
        tbits = 0;
        for ( j = 0; j < 10; j = j + 1 )
            tbits |= trstrat[i][j];

        if (debug_scanner)
	{
            fprintf(stderr, "\t\tDEBUG:dumprule(): tbits = 0x%08X\n", tbits);
	}

	if ( ( tbits & ibset( 0, rulenum ) ) == 0 )
        {
            valstr( i, buf );
            fprintf(stderr, "conqstrat: Rule on line %d can't happen, %s is broken\n",
		    Lineno, buf);
        }
    }

    /* Update rule number. */
    rulenum = rulenum + 1;

    return;

}


/* addrule - add info to the current rule */
void addrule( int var, int op, int num )
{
    int i, rulebits;
    char svar[32], sop[32];

    if ( debug_scanner || verbose)
    {
        valstr( var, svar );
        valstr( op, sop );
        fprintf( stderr, "DEBUG: addrule(%s, %s, %d)\n", svar, sop, num );

    }

    if ( rulenum >= 32 )
    {
        fprintf(stderr, "ERROR: conqstrat: More than 32 rules; line %d\n", Lineno );
        exit(1);
    }

    if ( num < 0 || num > 9 )
    {
        fprintf(stderr, "ERROR: addrule: impossible number %d, line %d\n",
                num,
                Lineno);
        exit(1);
    }

    if ( var < 0 || num >= MAX_VAR )
    {
        fprintf(stderr, "ERROR: addrule: impossible variable %d, line %d\n",
                var,
                Lineno);
        exit(1);
    }

    rulebits = ~(ibset( 0, rulenum ));

    if (debug_scanner )
        fprintf(stderr, "DEBUG:\taddrule(): rulebits = 0x%0X rulenum = %d\n",
                rulebits,
                rulenum);

    switch ( op )
    {
    case OP_LT:
        for ( i = num; i <= 9; i = i + 1 )
            trstrat[var][i] &= rulebits;
        break;
    case OP_LE:
        for ( i = num + 1; i <= 9; i = i + 1 )
            trstrat[var][i] &= rulebits;
        break;
    case OP_GT:
        for ( i = 0; i <= num; i = i + 1 )
            trstrat[var][i] &= rulebits;
        break;
    case OP_GE:
        for ( i = 0; i < num; i = i + 1 )
            trstrat[var][i] &= rulebits;
        break;
    case OP_EQ:
        for ( i = 0; i <= 9; i = i + 1 )
            if ( i != num )
                trstrat[var][i] &= rulebits;
        break;
    case OP_NE:
        trstrat[var][num] &= rulebits;
        break;
    default:
        fprintf(stderr, "ERROR: addrule: impossible op %d\n", op );
        exit(1);
    }

    return;

}


/* invertop - invert an operator */
int invertop( int op )
{
    int iop;

    switch ( op )
    {
    case OP_LT:
        iop = OP_GE;
        break;
    case OP_LE:
        iop = OP_GT;
        break;
    case OP_GT:
        iop = OP_LE;
        break;
    case OP_GE:
        iop = OP_LT;
        break;
    default:
        iop = op;
    }

    return ( iop );

}


/* valstr - convert a var/op value to a string */
void valstr( int value, char *buf )
{
    switch ( value )
    {
    case VAR_RANDOM:
        strcpy(buf , "random") ;
        break;
    case VAR_DNE:
        strcpy(buf , "dne") ;
        break;
    case VAR_DAMAGE:
        strcpy(buf , "damage") ;
        break;
    case VAR_INCOMING:
        strcpy(buf , "incoming") ;
        break;
    case VAR_FUEL:
        strcpy(buf , "fuel") ;
        break;
    case VAR_NUMTORPS:
        strcpy(buf , "numtorps") ;
        break;
    case VAR_SHIELDS:
        strcpy(buf , "shields") ;
        break;
    case VAR_ETEMP:
        strcpy(buf , "etemp") ;
        break;
    case VAR_WTEMP:
        strcpy(buf , "wtemp") ;
        break;
    case VAR_PHASERDAM:
        strcpy(buf , "phaserdam") ;
        break;
    case VAR_TORPDAM:
        strcpy(buf , "torpdam") ;
        break;
    case VAR_WARP:
        strcpy(buf , "warp") ;
        break;
    case VAR_SHUP:
        strcpy(buf , "shup") ;
        break;
    case VAR_WALLOC:
        strcpy(buf , "walloc") ;
        break;
    case VAR_ORBITING:
        strcpy(buf , "orbiting") ;
        break;
    case VAR_REPAIRING:
        strcpy(buf , "repairing") ;
        break;
    case VAR_CLOAKED:
        strcpy(buf , "cloaked") ;
        break;
    case VAR_ENEMYCLOAKED:
        strcpy(buf , "enemycloaked") ;
        break;
    case VAR_ENEMYDAMAGE:
        strcpy(buf , "enemydamage") ;
        break;
    case VAR_CANREAD:
        strcpy(buf , "canread") ;
        break;
    case OP_LT:
        strcpy(buf , "lt") ;
        break;
    case OP_LE:
        strcpy(buf , "le") ;
        break;
    case OP_GT:
        strcpy(buf , "gt") ;
        break;
    case OP_GE:
        strcpy(buf , "ge") ;
        break;
    case OP_EQ:
        strcpy(buf , "eq") ;
        break;
    case OP_NE:
        strcpy(buf , "ne") ;
        break;
    default:
        sprintf( buf, "OP_<%d>", value );
    }

    return;

}

/* tokstr - convert a token to a string */
void tokstr( int token, char *buf )
{
    switch ( token )
    {
    case TOK_VARIABLE:
        strcpy(buf , "TOK_VARIABLE") ;
        break;
    case TOK_OPERATOR:
        strcpy(buf , "TOK_OPERATOR") ;
        break;
    case TOK_NUMBER:
        strcpy(buf , "TOK_NUMBER") ;
        break;
    case TOK_TERMINATOR:
        strcpy(buf , "TOK_TERMINATOR") ;
        break;
    case TOK_ACTION:
        strcpy(buf , "TOK_ACTION") ;
        break;
    case TOK_AND:
        strcpy(buf , "TOK_AND") ;
        break;
    case TOK_NOT:
        strcpy(buf , "TOK_NOT") ;
        break;
    default:
        sprintf( buf, "TOK_<%d>", token );
    }

    return;

}

/* ibset - set a bit for world peace */
unsigned int ibset(int start, int end)
{
    unsigned int retbits;

    retbits = (start | (1 << end));

    if (debug_scanner)
        fprintf(stderr, "#### IBSET() start = %d, end = %d, retbits = 0x%08X Dec(%d)\n",
                start, end, retbits, (int)retbits);

    return(retbits);

}

/* print_usage - print usage. Duh. */
void print_usage()
{
    fprintf(stderr, "Usage: conqstrat [-vdU] [ -o file] < conqrule\n");
    fprintf(stderr, "\t-v            be verbose about everything.\n");
    fprintf(stderr, "\t-d            turns on *lots* of debugging.\n");
//    fprintf(stderr, "\t-U            update the common block directly.\n");
    fprintf(stderr, "\t-o file       send generated header file to <file>\n");
    fprintf(stderr, "\t              (typically conqdata.h). stdout is the default.\n\n");
    fprintf(stderr, "\t  The default is to read from stdin. conqrule is a file\n");
    fprintf(stderr, "\t  containing rules for robot strategy.\n\n");

}
